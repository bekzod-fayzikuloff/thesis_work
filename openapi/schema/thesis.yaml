openapi: 3.0.3
info:
  title: Falcon
  version: '1.0'
  description: Social network
paths:
  /api/auth/register/:
    post:
      operationId: authRegisterCreate
      description: |-
        Register view.

        :argument
            request(Request): drf request.Request - `django.http.request.HttpRequest`'s subclass - object
        :return
            Register endpoint response
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/xml:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
            application/xml:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/auth/token/:
    post:
      operationId: authTokenCreate
      description: SignInView with custom token claims
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignInToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignInToken'
          application/json:
            schema:
              $ref: '#/components/schemas/SignInToken'
          application/xml:
            schema:
              $ref: '#/components/schemas/SignInToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInToken'
            application/xml:
              schema:
                $ref: '#/components/schemas/SignInToken'
          description: ''
  /api/auth/token/refresh/:
    post:
      operationId: authTokenRefreshCreate
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/xml:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
            application/xml:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/token/verify/:
    post:
      operationId: authTokenVerifyCreate
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/xml:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
            application/xml:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/chats/:
    get:
      operationId: chatsList
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - chats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatListList'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaginatedChatListList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
    post:
      operationId: chatsCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - chats
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChatCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatCreate'
          description: Create a new chat
        '400':
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/chats/{id}/:
    get:
      operationId: chatsRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRetrieve'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatRetrieve'
          description: Get a chat object data
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
    put:
      operationId: chatsUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatList'
          application/json:
            schema:
              $ref: '#/components/schemas/ChatList'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChatList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatList'
          description: Update a chat data
        '400':
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
    patch:
      operationId: chatsPartialUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatList'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatList'
          application/xml:
            schema:
              $ref: '#/components/schemas/PatchedChatList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatList'
          description: ''
  /api/chats/{id}/medias/:
    post:
      operationId: chatsMediasCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMediaCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMediaCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMediaCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChatMediaCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMediaCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatMediaCreate'
          description: ''
        '400':
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/chats/{id}/members/:
    get:
      operationId: chatsMembersRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMember'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatMember'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/chats/{id}/messages/:
    get:
      operationId: chatsMessagesRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatMessageList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/chats/elected/:
    get:
      operationId: chatsElectedRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - chats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatList'
          description: Update a chat data
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
  /api/chats/elected/messages/:
    post:
      operationId: chatsElectedMessagesCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - chats
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ForwardElectedMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ForwardElectedMessage'
          application/json:
            schema:
              $ref: '#/components/schemas/ForwardElectedMessage'
          application/xml:
            schema:
              $ref: '#/components/schemas/ForwardElectedMessage'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatList'
          description: Update a chat data
        '400':
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
  /api/comments/:
    post:
      operationId: commentsCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/CommentCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommentCreate'
          description: Create a new post's comment
        '400':
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        '204':
          description: No content
  /api/comments/{id}/:
    put:
      operationId: commentsUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommentCreate'
          description: ''
        '400':
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        '204':
          description: No content
    patch:
      operationId: commentsPartialUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCommentUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/PatchedCommentUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommentCreate'
          description: ''
        '400':
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        '204':
          description: No content
    delete:
      operationId: commentsDestroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - comments
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No content
  /api/followers/:
    post:
      operationId: followersCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - followers
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FollowerCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FollowerCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/FollowerCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/FollowerCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowerCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/FollowerCreate'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/followers/{id}/:
    delete:
      operationId: followersDestroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Follower.
        required: true
      tags:
      - followers
      security:
      - jwtAuth: []
      responses:
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '204':
          description: No content
  /api/messages/:
    post:
      operationId: messagesCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - messages
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChatMessageCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatMessageCreate'
          description: ''
  /api/messages/{id}/:
    put:
      operationId: messagesUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Message.
        required: true
      tags:
      - messages
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChatMessageUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageUpdate'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatMessageUpdate'
          description: ''
    patch:
      operationId: messagesPartialUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Message.
        required: true
      tags:
      - messages
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageUpdate'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatMessageUpdate'
          description: ''
    delete:
      operationId: messagesDestroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Message.
        required: true
      tags:
      - messages
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/:
    get:
      operationId: postsList
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
    post:
      operationId: postsCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/PostCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/PostCreate'
          description: ''
  /api/posts/{id}/:
    get:
      operationId: postsRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: postsUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/PostUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUpdate'
            application/xml:
              schema:
                $ref: '#/components/schemas/PostUpdate'
          description: ''
    patch:
      operationId: postsPartialUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/PatchedPostUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUpdate'
            application/xml:
              schema:
                $ref: '#/components/schemas/PostUpdate'
          description: ''
    delete:
      operationId: postsDestroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/medias/:
    post:
      operationId: postsMediasCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostMediaCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostMediaCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/PostMediaCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/PostMediaCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMediaCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/PostMediaCreate'
          description: ''
  /api/privatechats/:
    get:
      operationId: privatechatsList
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - privatechats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPrivateChatList'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaginatedPrivateChatList'
          description: ''
    post:
      operationId: privatechatsCreate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - privatechats
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PrivateChatCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PrivateChatCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateChatCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/PrivateChatCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateChatCreate'
            application/xml:
              schema:
                $ref: '#/components/schemas/PrivateChatCreate'
          description: ''
  /api/privatechats/{id}/:
    delete:
      operationId: privatechatsDestroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Private chat.
        required: true
      tags:
      - privatechats
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/privatechats/{id}/messages/:
    get:
      operationId: privatechatsMessagesRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Private chat.
        required: true
      tags:
      - privatechats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChatMessageList'
          description: ''
  /api/profiles/:
    get:
      operationId: profilesList
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProfileListList'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaginatedProfileListList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/profiles/{id}/:
    get:
      operationId: profilesRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Profile.
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
    put:
      operationId: profilesUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Profile.
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: Not found.
                  summary: Not Found
                  description: Not Found
            application/xml:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
    patch:
      operationId: profilesPartialUpdate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Profile.
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/xml:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/profiles/{id}/followed/:
    get:
      operationId: profilesFollowedRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Profile.
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowerList'
            application/xml:
              schema:
                $ref: '#/components/schemas/FollowerList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/profiles/{id}/followers/:
    get:
      operationId: profilesFollowersRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      - in: path
        name: id
        schema:
          type: integer
          title: ID записи
        description: A unique integer value identifying this Profile.
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowerList'
            application/xml:
              schema:
                $ref: '#/components/schemas/FollowerList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/profiles/me/:
    get:
      operationId: profilesMeRetrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
  /api/profiles/me/delete/:
    delete:
      operationId: profilesMeDeleteDestroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - xml
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
                  description: Unauthorized request
            application/xml:
              schema:
                $ref: '#/components/schemas/UnAuthorizedRequest'
          description: Unauthorized
        '204':
          description: No content
components:
  schemas:
    ChatCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        title:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 500
      required:
      - createdAt
      - id
      - title
      - updatedAt
    ChatList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 500
      required:
      - id
      - title
    ChatMediaCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        file:
          type: string
          format: uri
      required:
      - createdAt
      - file
      - id
      - updatedAt
    ChatMember:
      type: object
      properties:
        members:
          type: string
          readOnly: true
      required:
      - members
    ChatMessageCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        maker:
          type: integer
          title: ID записи
          readOnly: true
        chatType:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        content:
          type: string
          maxLength: 1000
        chatId:
          type: string
          format: uuid
        isActive:
          type: boolean
        answer:
          type: integer
          title: ID записи
          nullable: true
        medias:
          type: array
          items:
            type: integer
            title: ID записи
      required:
      - chatId
      - chatType
      - createdAt
      - id
      - maker
      - updatedAt
    ChatMessageList:
      type: object
      properties:
        messages:
          type: string
          readOnly: true
      required:
      - messages
    ChatMessageUpdate:
      type: object
      properties:
        content:
          type: string
          maxLength: 1000
        isActive:
          type: boolean
        answer:
          type: integer
          title: ID записи
          nullable: true
    ChatRetrieve:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 500
        membersQuantity:
          type: string
          readOnly: true
      required:
      - id
      - membersQuantity
      - title
    CommentCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        creator:
          type: integer
          title: ID записи
          readOnly: true
        post:
          type: integer
          title: ID записи
        content:
          type: string
          maxLength: 500
        answer:
          type: integer
          title: ID записи
          nullable: true
      required:
      - content
      - creator
      - id
      - post
    CommentUpdate:
      type: object
      properties:
        content:
          type: string
          maxLength: 500
      required:
      - content
    FollowerCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        followTo:
          type: integer
          title: ID записи
        follower:
          type: integer
          title: ID записи
          readOnly: true
      required:
      - followTo
      - follower
      - id
    FollowerList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        follower:
          type: string
          readOnly: true
      required:
      - follower
      - id
    ForwardElectedMessage:
      type: object
      properties:
        messageId:
          type: integer
      required:
      - messageId
    Nested:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        avatar:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          maxLength: 1000
        user:
          type: integer
          title: ID записи
      required:
      - createdAt
      - id
      - updatedAt
      - user
    NotFound:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    PaginatedChatListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChatList'
    PaginatedPostList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    PaginatedPrivateChatList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PrivateChat'
    PaginatedProfileListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProfileList'
    PatchedChatList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 500
    PatchedChatMessageUpdate:
      type: object
      properties:
        content:
          type: string
          maxLength: 1000
        isActive:
          type: boolean
        answer:
          type: integer
          title: ID записи
          nullable: true
    PatchedCommentUpdate:
      type: object
      properties:
        content:
          type: string
          maxLength: 500
    PatchedPostUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        description:
          type: string
          maxLength: 1000
        isActive:
          type: boolean
    PatchedProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        avatar:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          maxLength: 1000
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        description:
          type: string
          maxLength: 1000
        isActive:
          type: boolean
        creator:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        medias:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - createdAt
      - creator
      - description
      - id
      - medias
      - updatedAt
    PostCreate:
      type: object
      properties:
        description:
          type: string
          maxLength: 1000
        medias:
          type: array
          items:
            type: integer
            title: ID записи
        isActive:
          type: boolean
        creator:
          type: integer
          title: ID записи
          readOnly: true
      required:
      - creator
      - description
      - medias
    PostMediaCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        file:
          type: string
          format: uri
          pattern: (?:jpg|png|gif|bmp|ico|mp4|webm|avi)$
      required:
      - createdAt
      - file
      - id
      - updatedAt
    PostUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        description:
          type: string
          maxLength: 1000
        isActive:
          type: boolean
      required:
      - createdAt
      - description
      - id
      - updatedAt
    PrivateChat:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        member:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
      required:
      - createdAt
      - id
      - member
      - updatedAt
    PrivateChatCreate:
      type: object
      properties:
        firstMember:
          type: integer
          title: ID записи
          readOnly: true
        secondMember:
          type: integer
          title: ID записи
          nullable: true
      required:
      - firstMember
      - secondMember
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        avatar:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          maxLength: 1000
      required:
      - createdAt
      - id
      - updatedAt
    ProfileList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        avatar:
          type: string
          format: uri
          nullable: true
        username:
          type: string
          readOnly: true
      required:
      - id
      - username
    ProfileUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: ID записи
        createdAt:
          type: string
          format: date-time
          readOnly: true
          title: Время создания записи
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          title: Время изменения записи
        avatar:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          maxLength: 1000
      required:
      - createdAt
      - id
      - updatedAt
    Register:
      type: object
      description: User register serializer class
      properties:
        username:
          type: string
          maxLength: 255
        password:
          type: string
          writeOnly: true
        passwordConfirm:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
      required:
      - email
      - password
      - passwordConfirm
      - username
    SignInToken:
      type: object
      description: Customize SignInTokenSerializer for provide custom token claim
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UnAuthorizedRequest:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
